# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GeoConverter
                                 A QGIS plugin
 Geo Converter
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-04-07
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Maximilian Ramstofer
        email                : maximilianramstorfer@kabsi.at
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QFileDialog, QTableWidgetItem, QTableView
import sys, os
#from PyQt4.QtCore import *
#from PyQt4.QtGui import *
#from qgis.core import QgsProject, Qgis
#from pyproj import Transformer
from pyproj import Proj, transform
#from pyproj import Transformer


file_path = './pyproj/pyproj' # path to pyproj folder
sys.path.append(os.path.dirname(file_path))


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .geo_converter_dialog import GeoConverterDialog
import os.path


class GeoConverter:
    """QGIS Plugin Implementation."""


    inname = ""
    outname = ""
    pos1 = 0
    pos2 = 0
    pos3 = 0
    sep_in = ';'
    sep_out = '\t'
    seplist = [';',',',' ','\t']

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GeoConverter_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Geo Converter')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GeoConverter', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/geo_converter/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Geo Converter'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Geo Converter'),
                action)
            self.iface.removeToolBarIcon(action)


    def openInFile(self):
        temp = QFileDialog.getOpenFileName(self.dlg, 'Open file', 'c:\\',"Text files (*.txt *.csv)")
        self.inname = temp[0]
        print(self.inname)
        self.dlg.text_input.setText(self.inname)
        self.populateCombos()
        

    def openOutFile(self):
        temp = QFileDialog.getSaveFileName(self.dlg, 'Save file')
        self.outname = temp[0]
        print(self.outname)
        self.dlg.text_output.setText(self.outname)
   
    def populateCombos(self):
        # read first line, if no header
        # split per input limiter
        # ask for field selection
        # show result in table
        tp1 = self.dlg.combo_sep_in.currentIndex()
        tp2 = self.dlg.combo_sep_out.currentIndex()
        self.sep_in = self.seplist[tp1]
        self.sep_out = self.seplist[tp2]

        file = open(self.inname, 'r')
        count = 0
        Lines = file.readlines()
        for line in Lines:
            parts = line.split(self.sep_in)
            siz = len(parts) # anzahl der Spalten
            if count == 1:                    
                self.dlg.table_preview.setColumnCount(3)
                self.dlg.table_preview.setRowCount(12)
                hdnames = ['X','Y','Z']
                for i in range(siz):
                    hdnames.append("Feld "+str(i))
                    self.dlg.table_preview.setHorizontalHeaderLabels(hdnames)
                    self.dlg.combo_feld1.clear()
                    self.dlg.combo_feld2.clear()
                    self.dlg.combo_feld3.clear()
                    for i in range(siz):
                        self.dlg.combo_feld1.addItem("Feld "+str(i))
                        self.dlg.combo_feld2.addItem("Feld "+str(i))
                        self.dlg.combo_feld3.addItem("Feld "+str(i))
                #for i in range(siz):
                #    self.dlg.table_preview.setItem(count,i,QTableWidgetItem(parts[i]))
            count += 1
                #print(line)

            if count == 10:
                break

        
    def updateTable(self):
        # show result from field selection in table
        self.pos1 = self.dlg.combo_feld1.currentIndex()
        self.pos2 = self.dlg.combo_feld2.currentIndex()
        self.pos3 = self.dlg.combo_feld3.currentIndex()

        
        file = open(self.inname, 'r')
        count = 0
        Lines = file.readlines()
        count = 0
        for line in Lines:
            parts = line.split(self.sep_in)
            self.dlg.table_preview.setItem(count,0,QTableWidgetItem(parts[self.pos1]))
            self.dlg.table_preview.setItem(count,1,QTableWidgetItem(parts[self.pos2]))
            self.dlg.table_preview.setItem(count,2,QTableWidgetItem(parts[self.pos3]))
            count += 1
        file.close()
        

    def convertFile(self):
        #insep = self.dlg.combo_sep_in.currentText()
        #outsep = self.dlg.combo_sep_out.currentText()

        epIn = self.dlg.combo_epsg_in.currentText()
        epOut = self.dlg.combo_epsg_out.currentText()
        infile = open(self.inname,'r')
        outfile = open(self.outname,'w')

        prjxi = epIn.split(' ')
        prj_in = prjxi[0]#.lower()
        inProj = Proj(init='epsg:3758') #Proj(prj_in)

        prjxo = epOut.split(' ')
        prj_out = prjxo[0]#.lower()
        outProj = Proj(init='epsg:31258') #Proj(prj_out)

        Lines = infile.readlines()
        count = 0
        for lines in Lines: 
            parts = lines.split(self.sep_in)
            if len(parts)>=3 : 
               rechts = parts[self.pos1]
               hoch = parts[self.pos2]
               zet = parts[self.pos3]
               # hier konverteiren
               #transformer = Transformer.from_crs("EPSG:3857", "EPSG:31258")
               x1,y1 = rechts,hoch
               x2,y2 = transform(inProj,outProj,x1,y1)
               x2 = round(x2,8)
               y2 = round(y2,8)
               outfile.write(x2+outsep+y2+outsep+zet+"\n")
        infile.close()
        outfile.close()



    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = GeoConverterDialog()

        self.dlg.button_in.clicked.connect(self.openInFile)
        self.dlg.button_out.clicked.connect(self.openOutFile)
        self.dlg.button_go.clicked.connect(self.convertFile)
        self.dlg.button_update.clicked.connect(self.updateTable)


        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass


# show and get input
# get output file
# get input system
# get output system
# get get seperators
# read files linewise
# split lines
# select rechts, hoch, höhe
# calculate new values, 
# write rechts, hoch, höhe
